{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Alert.js","App.js","index.js"],"names":["Filter","props","value","onChange","handleOnChange","PersonForm","onSubmit","handleOnSubmit","values","type","Persons","personsToDisplay","handleClick","listOfPersons","map","person","key","name","number","onClick","id","baseUrl","axios","get","then","response","data","newPerson","post","delete","put","Alert","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchedName","setSearchedName","alertMessage","setAlertMessage","alertType","setAlertType","useEffect","personService","initialPersons","nameExists","find","toLowerCase","length","filter","includes","e","target","preventDefault","window","confirm","personToUpdate","changedPerson","updatedPerson","setTimeout","catch","error","addedPerson","concat","idToRemove","personToRemove","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22e1b88f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = (props) => {\n  return (\n    <div>\n      Find by name: <input value={props.value} onChange={props.handleOnChange} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.handleOnSubmit}>\n      <div>\n        name: <input value={props.values[0]} onChange={props.handleOnChange[0]} />\n      </div>\n      <div>\n        number: <input value={props.values[1]} onChange={props.handleOnChange[1]} />\n      </div>\n      <div>\n        <button type='submit'>add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Persons = ({ personsToDisplay, handleClick }) => {\n  const listOfPersons = personsToDisplay.map((person) => {\n    return (\n      <li key={person.name}>\n        {person.name} ({person.number}){' '}\n        <button onClick={() => handleClick(person.id)}>delete</button>\n      </li>\n    );\n  });\n\n  return <ul>{listOfPersons}</ul>;\n};\n\nexport default Persons;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newPerson) => {\n  const request = axios.post(baseUrl, newPerson);\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request;\n};\n\nconst update = (id, newPerson) => {\n  const request = axios.put(`${baseUrl}/${id}`, newPerson);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, remove, update };\n","import React from 'react';\n\nconst Alert = ({ message, type }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={type}>{message}</div>;\n};\n\nexport default Alert;\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/persons';\nimport Alert from './components/Alert';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [searchedName, setSearchedName] = useState('');\n  const [alertMessage, setAlertMessage] = useState(null);\n  const [alertType, setAlertType] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const nameExists = persons.find((person) => person.name.toLowerCase() === newName.toLowerCase());\n\n  const addPerson = (e) => {\n    e.preventDefault();\n\n    if (nameExists) {\n      if (\n        window.confirm(`${newName} is already added to phonebook, replace old number with new one?`)\n      ) {\n        const personToUpdate = persons.find(\n          (person) => person.name.toLowerCase() === newName.toLowerCase()\n        );\n        const changedPerson = { ...personToUpdate, number: newNumber };\n\n        personService\n          .update(personToUpdate.id, changedPerson)\n          .then((updatedPerson) => {\n            setPersons(\n              persons.map((person) => (person.id !== personToUpdate.id ? person : updatedPerson))\n            );\n            setNewName('');\n            setNewNumber('');\n            setAlertType('success');\n            setAlertMessage(`${updatedPerson.name}'s number was updated`);\n            setTimeout(() => {\n              setAlertMessage(null);\n            }, 5000);\n          })\n          .catch((error) => {\n            setAlertType('error');\n            setAlertMessage(`${personToUpdate.name} was already removed from server`);\n            setTimeout(() => {\n              setAlertMessage(null);\n            }, 5000);\n            setPersons(persons.filter((person) => person.id !== personToUpdate.id));\n          });\n      }\n    } else {\n      const newPersonToAdd = { name: newName, number: newNumber };\n      personService.create(newPersonToAdd).then((addedPerson) => {\n        setPersons(persons.concat(addedPerson));\n        setNewName('');\n        setNewNumber('');\n        setAlertType('success');\n        setAlertMessage(`${addedPerson.name} was added to the phonebook`);\n        setTimeout(() => {\n          setAlertMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  const handleNameInputChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumberInputChange = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  const handleSearchedNameChange = (e) => {\n    setSearchedName(e.target.value);\n  };\n\n  const personsToDisplay =\n    searchedName.length === 0\n      ? persons\n      : persons.filter((person) => person.name.toLowerCase().includes(searchedName.toLowerCase()));\n\n  const removePerson = (idToRemove) => {\n    let personToRemove = persons.find((person) => person.id === idToRemove);\n    if (window.confirm(`Do you really want to delete ${personToRemove.name}?`)) {\n      personService.remove(idToRemove).then(() => {\n        setPersons(persons.filter((person) => person.id !== idToRemove));\n        setAlertType('success');\n        setAlertMessage(`${personToRemove.name} was deleted from phonebook`);\n        setTimeout(() => {\n          setAlertMessage(null);\n        }, 5000);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Alert message={alertMessage} type={alertType} />\n      <Filter value={searchedName} handleOnChange={handleSearchedNameChange} />\n\n      <h2>Add to phone book</h2>\n      <PersonForm\n        handleOnSubmit={addPerson}\n        values={[newName, newNumber]}\n        handleOnChange={[handleNameInputChange, handleNumberInputChange]}\n      />\n\n      <h2>Numbers</h2>\n      <Persons personsToDisplay={personsToDisplay} handleClick={removePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}